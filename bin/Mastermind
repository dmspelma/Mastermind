#!/usr/bin/env ruby

# frozen_string_literal: true

require_relative '../lib/mastermind/game'
require_relative '../helper/string_color_helper'
require_relative '../helper/game_settings_helper'

def begin_set(ver)
  return :regular if ver == 1
  return :super if ver == 2

  puts 'Invalid Option Entered!!'.red
  puts 'Please Press 1 for Mastermind, or Press 2 for Super Mastermind'.green
  begin_set(gets.chomp.to_i)
end

# Main loop for playing the game.
loop do
  puts 'Starting Masterminds...'.yellow
  puts 'Press 1 for Mastermind, or Press 2 for Super Mastermind'.green
  game = Mastermind::MastermindGame.new(begin_set(gets.chomp.to_i))
  puts 'Creating Game...'.yellow
  game.start_game

  # only display help on game start
  if game.game_counter < 1
    print 'Type '.blue
    print 'help'.cyan
    puts ' if you require instructions.'.blue
  end

  while game.turns_remaining.positive?
    print 'What is your guess? '.green
    puts "(Turns Remaining: #{game.g_turns})".purple
    player_guess = gets.chomp.upcase.chars
    case player_guess.join.downcase
    when 'help' # player needs help mid-game
      puts '-'.cyan * 83
      print 'Your goal is to crack the code! '.green
      puts "The code is a #{GameParams::LENGTH[game.version]}-color combination of the following:".green
      puts '`R` for Red'.red
      puts '`G` for Green'.green
      puts '`B` for Blue'.blue
      puts '`Y` for Yellow'.yellow
      puts '`C` for Cyan'.cyan if game.version == :super
      puts '`P` for Purple'.purple if game.version == :super
      puts '`W` for White'.white
      puts '`K` for Black'.black
      print 'NOTE: '.red
      puts 'There can be multiples of the same color.'.green
      puts "You only have #{GameParams::TURNS[game.version]}".red
      puts '-'.cyan * 83

    when 'q', 'quit', 'exit' # player wants to quit mid-game
      puts 'Terminating Game...'.red
      break

    else # player attempted an input. Compare against master code, return result
      attempt = game.take_turn(player_guess)
      if !attempt
        puts 'Invalid Guess. Please take a look at your input, and ensure it is valid.'.red
        print 'If you are unsure, please try command '.red
        puts 'help'.cyan
      elsif attempt == :winner
        break
      else
        print "Correct: #{attempt[0]} ".cyan
        puts "| Correct Color, Wrong Spot: #{attempt[1]}".cyan
      end
    end
    game.lost if game.turns_remaining.zero?
  end

  break if GameParams::QUIT_CONTENTS.include?(player_guess.join.downcase)

  print 'Would you like to play again?'.green
  puts ' (Press Q to quit)'.yellow
  case gets.chomp.downcase
  when 'q', 'quit', 'exit', 'n', 'no'
    puts 'Thank you for playing. Goodbye.'.green
    break
  else
    puts '-'.cyan * 83
    puts 'Loading another round...'.yellow
  end

  game.add_game
end
